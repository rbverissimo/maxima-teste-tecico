1) Sistema de controle de cadastro de clientes
      a. com armazenamento geográfico da localização dos mesmos, para que possam ser feitas as entregas no local preciso;
      b. o cadastro conta com Código, Nome e CNPJ e o Endereço do cliente;
      c. Um cliente não pode ser cadastrado sem o seu endereço.


Modelagem do Banco de Dados: 

Clientes
      codigo int pk not null
      nome  varchar(255) not null
      cnpj  varchar(19)
      endereco_fk int not null

Endereco
      codigo int pk not null
      descricao varchar(255)
      localizacao blob (16836) not null 

2) View dos clientes em um mapa com filtro (por localização, por nome, talvez?)

Ações:
      1. Levantar os requisitos funcionais e não funcionais;
      2. Documentar os requisitos e as regras de negócio;
      3. Fazer o protótipo das telas;
      4. Elaborar um plano de testes. 


Requisitos funcionais/ não-funcionais:
      API RESTful:
            -> Com o intuito de validar a regra de negócio do sistema;
            -> Construída em Spring 3 e usando o Java 11
            -> Testes unitários gerados pelo Spring 
      SSR:
            -> Uma tela de cadastro e uma tela de mapa para aplicação dos filtros;
            -> Desenvolvido no Angular 17;
            -> São basicamente 3 componentes: um para o cadastro, outro para a edição dos clientes cadastrados e, por fim, um componente para o mapa (que pode ser embarcado à tela de visualização desses clientes). É interessante criar um grid de página que busque os clientes do banco em uma paginação de 15 por 15. 
      
      Banco de Dados: 
            -> MySQL
            -> Hibernate implementando o JPA
      Docker:
            -> Fazer a build e o deploy usando o docker

      


